package protocolCoderImpl

import "fmt"

type DefualtSecuritier struct {
	sendMap []byte
	recvMap []byte
}

func NewDefualtSecuritier() (this *DefualtSecuritier) {
	this = new(DefualtSecuritier)
	this.sendMap = make([]byte, 256)
	this.recvMap = make([]byte, 256)
	this.sendMap = []byte{0xb, 0xc2, 0xf6, 0xf8, 0x60, 0x7f, 0xcd, 0xc9, 0x39, 0x50, 0x90, 0x1a, 0x7, 0xe1, 0x2f, 0x36, 0x9f, 0xe8, 0x3a, 0x2d, 0xd3, 0x7c, 0x51, 0xfe, 0x83, 0xcb, 0x42, 0x9a, 0x45, 0xda, 0xb9, 0x10, 0x2a, 0x5f, 0x96, 0xdd, 0xe0, 0xa, 0xcf, 0x93, 0x53, 0xe5, 0xc3, 0x17, 0xb8, 0x15, 0x67, 0xbd, 0x8, 0x5e, 0xdb, 0xdc, 0x41, 0xa8, 0x1b, 0xf7, 0xd2, 0x54, 0x5a, 0xfa, 0xa3, 0x48, 0x9e, 0x95, 0x64, 0x24, 0x8f, 0xd7, 0x71, 0x22, 0x1c, 0xf0, 0x8e, 0xeb, 0x5, 0x59, 0x44, 0x9, 0x5d, 0xf9, 0x4, 0x1f, 0x7a, 0xf2, 0x3c, 0xa4, 0x35, 0xd9, 0xdf, 0x98, 0x49, 0x97, 0x87, 0x0, 0x74, 0x57, 0x12, 0x28, 0xaf, 0x29, 0x8c, 0xab, 0x79, 0xd5, 0xba, 0x1e, 0xfc, 0x2, 0x9c, 0x63, 0x38, 0x1d, 0x82, 0xc4, 0x4e, 0x4a, 0x31, 0xf4, 0xc6, 0x3e, 0x65, 0x37, 0x86, 0x4b, 0x6b, 0x40, 0x47, 0x78, 0xa7, 0x16, 0xe4, 0xf3, 0x25, 0x6f, 0x18, 0x21, 0x11, 0x33, 0xa0, 0xfd, 0xce, 0x19, 0xaa, 0xc5, 0x55, 0x80, 0x8a, 0xe9, 0x6e, 0xbc, 0xac, 0xc, 0x7e, 0xca, 0x1, 0x23, 0x73, 0xa1, 0xd4, 0xb7, 0x94, 0xf, 0xe3, 0x2c, 0xe2, 0x84, 0xb0, 0xbe, 0xff, 0x8d, 0x46, 0x8b, 0x58, 0xfb, 0x76, 0xef, 0xb4, 0xf1, 0xbb, 0x13, 0xa5, 0x2b, 0x32, 0x4f, 0x3b, 0x70, 0x75, 0xe, 0xc1, 0xde, 0xcc, 0xed, 0xb1, 0x62, 0xd1, 0xa9, 0x43, 0xd8, 0xec, 0x66, 0xb6, 0xee, 0xd0, 0xea, 0x3d, 0x3f, 0x5b, 0x56, 0x72, 0x85, 0x6c, 0x7d, 0x91, 0xa2, 0xae, 0xc8, 0x4c, 0x5c, 0xf5, 0x9b, 0xb5, 0x6d, 0x88, 0xe7, 0xa6, 0x81, 0xb3, 0x99, 0xd6, 0x26, 0xc7, 0xbf, 0xad, 0x30, 0x61, 0x2e, 0x6a, 0x6, 0x3, 0x20, 0x52, 0x27, 0x68, 0x89, 0x7b, 0x69, 0x14, 0x77, 0x92, 0xe6, 0x4d, 0x34, 0x9d, 0xc0, 0xb2, 0xd}
	this.recvMap = []byte{0x5d, 0x9a, 0x6b, 0xee, 0x50, 0x4a, 0xed, 0xc, 0x30, 0x4d, 0x25, 0x0, 0x97, 0xff, 0xbb, 0xa1, 0x1f, 0x88, 0x60, 0xb3, 0xf6, 0x2d, 0x81, 0x2b, 0x86, 0x8d, 0xb, 0x36, 0x46, 0x6f, 0x69, 0x51, 0xef, 0x87, 0x45, 0x9b, 0x41, 0x84, 0xe5, 0xf1, 0x61, 0x63, 0x20, 0xb5, 0xa3, 0x13, 0xeb, 0xe, 0xe9, 0x74, 0xb6, 0x89, 0xfb, 0x56, 0xf, 0x79, 0x6e, 0x8, 0x12, 0xb8, 0x54, 0xcc, 0x77, 0xcd, 0x7d, 0x34, 0x1a, 0xc4, 0x4c, 0x1c, 0xaa, 0x7e, 0x3d, 0x5a, 0x73, 0x7b, 0xd8, 0xfa, 0x72, 0xb7, 0x9, 0x16, 0xf0, 0x28, 0x39, 0x90, 0xcf, 0x5f, 0xac, 0x4b, 0x3a, 0xce, 0xd9, 0x4e, 0x31, 0x21, 0x4, 0xea, 0xc1, 0x6d, 0x40, 0x78, 0xc7, 0x2e, 0xf2, 0xf5, 0xec, 0x7c, 0xd2, 0xdd, 0x94, 0x85, 0xb9, 0x44, 0xd0, 0x9c, 0x5e, 0xba, 0xae, 0xf7, 0x7f, 0x66, 0x52, 0xf4, 0x15, 0xd3, 0x98, 0x5, 0x91, 0xe1, 0x70, 0x18, 0xa5, 0xd1, 0x7a, 0x5c, 0xde, 0xf3, 0x92, 0xab, 0x64, 0xa9, 0x48, 0x42, 0xa, 0xd4, 0xf8, 0x27, 0xa0, 0x3f, 0x22, 0x5b, 0x59, 0xe3, 0x1b, 0xdb, 0x6c, 0xfc, 0x3e, 0x10, 0x8a, 0x9d, 0xd5, 0x3c, 0x55, 0xb4, 0xe0, 0x80, 0x35, 0xc3, 0x8e, 0x65, 0x96, 0xe8, 0xd6, 0x62, 0xa6, 0xc0, 0xfe, 0xe2, 0xb0, 0xdc, 0xc8, 0x9f, 0x2c, 0x1e, 0x68, 0xb2, 0x95, 0x2f, 0xa7, 0xe7, 0xfd, 0xbc, 0x1, 0x2a, 0x71, 0x8f, 0x76, 0xe6, 0xd7, 0x7, 0x99, 0x19, 0xbe, 0x6, 0x8c, 0x26, 0xca, 0xc2, 0x38, 0x14, 0x9e, 0x67, 0xe4, 0x43, 0xc5, 0x57, 0x1d, 0x32, 0x33, 0x23, 0xbd, 0x58, 0x24, 0xd, 0xa4, 0xa2, 0x82, 0x29, 0xf9, 0xdf, 0x11, 0x93, 0xcb, 0x49, 0xc6, 0xbf, 0xc9, 0xaf, 0x47, 0xb1, 0x53, 0x83, 0x75, 0xda, 0x2, 0x37, 0x3, 0x4f, 0x3b, 0xad, 0x6a, 0x8b, 0x17, 0xa8}
	return this
}

func (securitier *DefualtSecuritier) Encrypt(b []byte) []byte {
	cbCheckCode := int32(0)
	for i := 0; i < len(b); i = i + 1 {
		cbCheckCode = cbCheckCode + int32(b[i])
		b[i] = securitier.sendMap[b[i]]
	}
	encryptCode := byte(^cbCheckCode + 1)
	securityBuf := []byte{byte(encryptCode)}
	return append(securityBuf, b...)
}

func (securitier *DefualtSecuritier) Decrypt(b []byte) (bool, []byte) {
	fmt.Println(b)
	encryptCode := int8(b[0]) //加密校验码
	cbCheckCode := int32(encryptCode)
	for i := 1; i < len(b); i = i + 1 {
		b[i] = securitier.recvMap[b[i]]
		cbCheckCode = cbCheckCode + int32(b[i])
	}
	cbCheckCode %= 256
	return cbCheckCode == 0, b[1:]
}

func (securitier *DefualtSecuritier) DecryptNoCheck(b []byte, startIndex int32, wDataSize int32) {
	for i := startIndex; i < wDataSize; i = i + 1 {
		b[i] = securitier.recvMap[b[i]]
	}
}
